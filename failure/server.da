#this is the class for bank server
import sys
import random
import time
import logging

class Server(process):
	def setup(master,bankName,bank):
		self.sentHist = []
		self.hist = []
		self.nextP = 0
		self.prevP = 0
		self.isHead = False
		self.isTail = False
		self.SN = 0
		self.isWaitForProcessedTransfer = False
		self.lc = logical_clock()
		self.probDrop = 0.2
		self.logger= logging.getLogger('')
		
	def main():
		
		#read config for start up delay
		random.seed()
		n = random.randint(0,1)
		#time.sleep(n)
				
		#lc=logical_clock()
		#send((('newServer', bankName), (lc,self.id)), to = master)
		#await(some(received((('addServer',_),(rlc,rid)), from_ = m), has=((rlc,rid)>(lc,self.id))))
		lc=logical_clock()
		send((('neighbor', bankName),(lc,self.id)), to = master)
		await(some(received((('replyNeighbor',(prev,next)),(rlc,rid)), from_ = master)))
		logger.info('sets the neighbor\n')
		while True:
			await(some(received(('terminate',), from_ = master)))
	
	#handle ping message from master
	def recv(msg=(('ping',),(rlc,id)), from_ = m):
		lc = logical_clock()
		send((('reply',),(lc,self.id)), to = m)
	
	#handle balance query from client
	def recv(msg=(('getBalance',(accountNum,)),(tlc, tid)), from_ = p):
		if isTail:
			r = random.random()
			if (r>probDrop):
					lc=logical_clock()
					send((('getBalanceRep',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = p)
					logger.info('%s is not an acc in this bank\n'%accountNum)
		else:
			logger.info('im not the tail\n')
	
	#handle deposit request from client
	def recv(msg=(('deposit',(accountNum,amount)),(tlc,tid)), from_ = p):
		if isHead:
			if ((('deposit',SN+1),(accountNum,amount)),(tlc,tid)) not in sentHist:
				if ((bank.getBalance(accountNum)+amount)>0):
					logger.info('head %s process deposit of %i with SN %i'%(self.id,amount,SN+1))
					send(((('deposit',SN+1),(accountNum,amount)),(tlc,tid)), to = self.id)
				else:
					send((('insuff',(accountNum,amount)),(tlc,tid)), to=nextP)
			else:
				send(((('deposit',SN+1),(accountNum,amount)),(tlc,tid)), to = nextP)
	
	#handle deposit request from server	
	def recv(msg=((('deposit',tSN),(accountNum,amount)),(tlc,tid)), from_ = p):
		if (some(x in sentHist, has=(x[0][0]==('deposit',tSN))) or 
				some(x in hist, has=(x[0][0]==('deposit',tSN))) ):
			lc = logical_clock()
			logger.info('%s received duplicate\n'%self.id)
			send((('getBalance',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = tid)
		elif (some(x in sentHist, has=(x[0][0][1]==tSN)) or 
				some(x in hist, has=(x[0][0][1]==tSN))):
			lc = logical_clock()
			logger.info('%s received query with same SN %i from %s\n'%(self.id,tSN,tid))
			send((('inconsistHist',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = tid)
		elif tSN>self.SN:
			self.SN = tSN
			if not isWaitForProcessedTransfer:
				if ((('deposit',tSN),(accountNum,amount)),(tlc,tid)) not in sentHist:
					bank.deposit(accountNum,amount)					
					sentHist.append(((('deposit',tSN),(accountNum,amount)),(tlc,tid)))
					if isTail:
						lc = logical_clock()
						send((('getBalanceRep',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = tid)
						sentHist.remove(((('deposit',tSN),(accountNum,amount)),(tlc,tid)))
						hist.append(((('deposit',tSN),(accountNum,amount)),(tlc,tid)))
						logger.info('tail %s process deposit of %i with SN %i'%(self.id,amount,SN))
						lc = logical_clock()
						send((('ack',((('deposit',tSN),(accountNum,amount)),(tlc,tid))),(lc,self.id)), to = prevP)
					else:
						lc = logical_clock()
						send(((('deposit',tSN),(accountNum,amount)),(tlc,tid)), to = nextP)

				else:
					if isTail:
						lc=logical_clock()
						send((('getBalanceRep',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = tid)
					else:
						lc=logical_clock()
						send(((('deposit',SN),(accountNum,amount)),(tlc,tid)), to = nextP)
			else:
				if isTail:
					lc=logical_clock()
					send((('getBalanceRep',(accountNum,bank.getBalance(accountNum))),(lc,self.id)), to = tid)
	
	#handle create account request from client, mechanism is same as deposit
	def recv(msg=(('createAcc',amount),(tlc,tid)), from_ = p):
		if isHead:
			SN+=1
			acc = random.randint(1,1000)
			while not bank.validateAcc(acc):
				acc = random.randint(1,1000)
			if ((('createAcc',SN),(acc,amount)),(tlc,tid)) not in sentHist:
				send(((('createAcc',SN),(acc,amount)),(tlc,tid)), to = self.id)
				sentHist.append(((('createAcc',SN),(acc,amount)),(tlc,tid)))
				bank.createAcc(acc,amount)
			else:
				send(((('createAcc',SN),(acc,amount)),(tlc,tid)), to = nextP)
				
	#handle create account request from server, similar to deposit
	def recv(msg=((('createAcc',tSN),(acc,amount)),(tlc,tid)), from_ = p):
		if tSN>=self.SN:
			self.SN = tSN
			if not isWaitForProcessedTransfer:
				if ((('createAcc',tSN),(acc,amount)),(tlc,tid)) not in sentHist:
					bank.createAcc(acc,amount)					
					sentHist.append(((('createAcc',tSN),(acc,amount)),(tlc,tid)))
					if isTail:
						lc = logical_clock()
						send((('createRep',(acc,bank.getBalance(acc))),(lc,self.id)), to = tid)
						sentHist.remove(((('createAcc',tSN),(acc,amount)),(tlc,tid)))
						hist.append(((('createAcc',tSN),(acc,amount)),(tlc,tid)))
						lc = logical_clock()
						send((('ack',((('createAcc',tSN),(acc,amount)),(tlc,tid))),(lc,self.id)), to = prevP)
					else:
						lc = logical_clock()
						send(((('createAcc',tSN),(acc,amount)),(tlc,tid)), to = nextP)

				else:
					if isTail:
						lc=logical_clock()
						send((('createRep',(acc,bank.getBalance(acc))),(lc,self.id)), to = tid)
					else:
						lc=logical_clock()
						send(((('createAcc',tSN),(acc,amount)),(tlc,tid)), to = nextP)
			else:
				if isTail:
					lc=logical_clock()
					send((('createRep',(acc,bank.getBalance(acc))),(lc,self.id)), to = tid)
	
	#handle insufficient fee message				
	def recv(msg=(('insuff',(accountNum,amount)),(tlc,tid)), from_ = p):
		if isTail:
			lc = logical_clock()
			send((('insuff',(accountNum,amount)),(lc,self.id)), to=tid)
		else:
			send((('insuff',(accountNum,amount)),(tlc,tid)), to=nextP)
	
	#handle ack message from server				
	def recv(msg=(('ack', m),(tlc,tid)), from_ = p):
		sentHist.remove(m)
		hist.append(m)
		if not isHead:
			send((('ack', m),(lc,self.id)), to = prevP)
	
	#not used in phase 2
	def recv(msg=(('addServer',p),(lc,id)), from_ = m):
		send(('hist',), to = p)
	
	#not used in phase 2	
	def recv(msg=('hist',), from_ = p):
		#self.bank = bank
		#self.hist = hist
		isTail = True
		isWaitForProcessedTransfer = True
		send(('done',), to = (master,p))
	
	#not used in phase 2
	def recv(msg=('done',), from_ = p):
		isTail = False
		#implement sent in tail when adding new server
	
	#handle pid query from master
	def recv(msg=(('pid',),(rlc,rid)), from_ = m):
		lc = logical_clock()
		send((('replyPid',),(lc,self.id)), to = master)
	
	#handle neighbor query reply message
	def recv(msg=(('replyNeighbor',(prev,next)),(lc,id)), from_ = m):
		self.nextP = next
		self.prevP = prev
		if (self.nextP== self.id):
			isTail = True;
		if (self.prevP==self.id):
			isHead=True
		
#need to process finished message 
			