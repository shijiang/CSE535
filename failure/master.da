#this is the class for master
import sys
import random
import time
import logging


class  Master(process):
	#initialize the master
	def setup(ps):
		self.resp = {}
		self.unresp = {}
		self.timer = 4
		self.lc = logical_clock()
		self.ht = {}
		self.seenPid = []
		self.chainNum = len(ps.keys())
		self.probDrop = 0.2
		self.logger= logging.getLogger('')
	
	def main():
		logger.info("master starts\n")
		for k in ps.keys():
			for p in ps[k]:
				resp[p] = True
				unresp[p] = 0

		for k in ps.keys():
			h = head(k)
			t = tail(k)
			ht[k]=(h,t)
		
		#ping all the servers
		while True:
			time.sleep(timer)
			for k in ps.keys():
				for p in ps[k]:
					lc=logical_clock()
					send((('ping',),(lc,self.id)), to = p)
					if await(some(received((('reply',),(lc,id)), from_=repServ), has=(p==repServ and lc>self.lc))):
						pass
					elif timeout(timer):
						unresp[p]+=1
					if unresp[p]>3:
						ps[chainNum].remove(p)
						##send fail server message
					resp[p]=False
		
	#handle ping reply message from servers
	def recv(msg=(('reply',),(lc,id)), from_=p):
		if (lc>self.lc):
			resp[p] = True;
			unresp[p] = 0;
	
	#not used in phase 2
	def recv(msg=(('newServer',n),(lc,id)), from_ =p):
		if (ps[n].count(p) == 0):
			ps[n].append(p)
			send((('addServer',p),(lc,id)), to = tail(n))
			logger.info('new server %s in the ps\n'%(id))
		else:
			pass
	#not used in phase 2
	def recv(msg=(('done',n),(lc, id)), from_ = p):
		ps[n].append(p)
		(h,t) = ht[n]
		ht[n] = (h,id)
		resp[id] = True
		unresp[id] = 0
	
	#handle head query message from client
	def recv(msg=(('head',n),(tlc, tid)), from_ = p):
		r = random.random()
		if (r>probDrop):
			lc=logical_clock()
			send((('replyHead',ht[n]),(lc,self.id)), to = p)
	
	#handle neighbor query message from server
	def recv(msg=(('neighbor', cn),(tlc,tid)),from_ = p):
		n = ps[cn].index(p)
		if (n+1 < len(ps[cn])):
			next = ps[cn][n+1]
		else:
			next=tid
		if (n-1>=0):
			prev = ps[cn][n-1]
		else:
			prev=tid
		lc=logical_clock()
		send((('replyNeighbor',(prev,next)),(lc,self.id)),to = p)
		logger.info('reply to Neighbor')
	
	#return tail
	def tail(num):
		n = len(ps[num])
		return ps[num][n-1]
	
	#return head
	def head(num):
		return ps[num][0]
	
	#send pid query to the server	
	def queryPid(p):
		lc = logical_clock()
		send((('pid',),(lc,self.id)), to = p)
		if await(some(received((('replyPid',),(rlc,rid)), from_ = np), has=(rlc>self.lc))):
			return rid
		elif timeout(3):
			logger.info('pid fail\n')

